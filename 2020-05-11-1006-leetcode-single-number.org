#+TITLE:LeetCode: Single Number
#+DATE: [2020-05-11-1006]
#+KEYWORDS: #leetcode

* Problem
Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

* Examples
** Example 1:
Input: [2,2,1]
Output: 1

** Example 2:
Input: [4,1,2,1,2]
Output: 4

* Reflection
The problem is asking us to develop an algorithm that has linear runtime complexity and without using extra memory. One approach to solving this problem is through the use of the Bitwise XOR operator. The bitwise XOR assignment operator uses the binary representation of both operands. Performs a XOR operation on them and assigns the result to the variable.

The bitwise XOR operator syntax is the following:
#+BEGIN_SRC js
// Operator:
x ^= y
// Meaning:
x  = x ^ y

#+END_SRC

In the MDN the example they use is:
#+BEGIN_SRC js
var bar = 5;
bar ^= 2; // 7
// 5: 00000000000000000000000000000101
// 2: 00000000000000000000000000000010
// -----------------------------------
// 7: 00000000000000000000000000000111
#+END_SRC

I could use iteration to iterate through every element in the array and perform an XOR operation and assign the result to the variable, thus finding the element that doesn't appear twice.

* Code
#+BEGIN_SRC js
var singleNumber = function (nums) {
  let result = 0; i = 0, len = nums.length;

  for (i; i < len; i++) {
    result ^= nums[i];
  }
  return result;
};
#+END_SRC

* Related
* External Links
- https://leetcode.com/problems/single-number/
- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment_Operators#Bitwise_XOR_assignment
- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_XOR
- http://www3.cs.stonybrook.edu/~skiena/373/videos/pdf/L3.pdf
